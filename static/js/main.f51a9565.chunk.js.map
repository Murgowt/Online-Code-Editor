{"version":3,"sources":["components/CodeEditor/Editor.tsx","components/CodeEditor/LocalStorage.tsx","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","language","value","onChange","useState","open","className","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","InitialRender","m_pos","panel","document","getElementById","resize","e","dy","y","style","height","parseInt","getComputedStyle","addEventListener","offsetY","removeEventListener","App","React","htmlPreCode","cssPreCode","JSPreCode","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","htmleditor","setHTML","csseditor","setCSS","jseditor","setJS","onClick","displayName","console","log","id","width","title","sandbox","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f51a9565.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'codemirror/mode/css/css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/theme/material.css'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\n\r\nconst Editor = (props:any)=>{\r\n    const {\r\n        language,\r\n        value,\r\n        onChange\r\n      } = props\r\n      const [open, setOpen] = useState(true)\r\n    \r\n      function handleChange(editor:any, data:any, value:any) {\r\n        onChange(value)\r\n      }\r\n    \r\n      return (\r\n        <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n          <div className=\"editor-title\">\r\n           \r\n          </div>\r\n\r\n          <ControlledEditor\r\n            onBeforeChange={handleChange}\r\n            value={value}\r\n            className=\"code-mirror-wrapper\"\r\n            options={{\r\n              lineWrapping: true,\r\n              lint: true,\r\n              mode: language,\r\n              theme: 'material',\r\n              lineNumbers: true\r\n            }}\r\n          />\r\n\r\n        </div>\r\n        \r\n      )\r\n}\r\nexport default Editor;","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'DYTE-'\r\n\r\nexport default function useLocalStorage(key:any, initialValue:any) {\r\n\r\n  const prefixedKey = PREFIX + key\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import React, { useState, useEffect } from 'react';\n\nimport Editor from './components/CodeEditor/Editor.tsx'\nimport './App.css';\nimport useLocalStorage from './components/CodeEditor/LocalStorage'\nconst InitialRender= () =>{\n  \n  const BORDER_SIZE = 400;\n  const panel = document.getElementById(\"LiveView\");\n\n  let m_pos;\n  function resize(e){\n    const dy = m_pos - e.y;\n    m_pos = e.y;\n    panel.style.height = (parseInt(getComputedStyle(panel, '').height) + dy) + \"px\";\n  }\n\n    panel.addEventListener(\"mousedown\", function(e){\n      if (e.offsetY < BORDER_SIZE) {\n        m_pos = e.y;\n        document.addEventListener(\"mousemove\", resize, false);\n      }\n    }, false);\n  \n    document.addEventListener(\"mouseup\", function(){\n        document.removeEventListener(\"mousemove\", resize, false);\n    }, false);\n}\n\nfunction App() {\n  const [value, setValue] = React.useState(2);\n  document.addEventListener('DOMContentLoaded', InitialRender, false);\n  let htmlPreCode=\"<html>\\n <body>\\n  Write Your Code Here \\n </body>\\n</html>\"\n  let cssPreCode = \"body\\n{\\n color: red;\\n}\"\n  let JSPreCode=\"console.log('Start')\"\n  const [html, setHtml] = useLocalStorage(htmlPreCode, htmlPreCode)\n  const [css, setCss] =  useLocalStorage(cssPreCode, cssPreCode)\n  const [js, setJs] =  useLocalStorage(JSPreCode, JSPreCode)\n  const [srcDoc, setSrcDoc] = useState('')\n   useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `)\n    }, 250)\n\n    return () => clearTimeout(timeout)\n  }, [html, css, js])\n  const [htmleditor,setHTML] =useState(true)\n  const [csseditor,setCSS] =useState(false)\n  const [jseditor,setJS] =useState(false)\n\n\n  const HTMLEditor =()=>{\n    setCSS(false)\n    setJS(false)\n    setHTML(true)\n   \n  }\n\n  const CSSEditor =()=>{\n    setJS(false)\n    setHTML(false)\n    setCSS(true)\n  }\n\n  const JSEditor =()=>{\n    setCSS(false)\n    setHTML(false)\n    setJS(true)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Editor\">\n        <div className=\"FileExplorer\">\n           <button className=\"Button\" onClick={HTMLEditor}>Index.html</button>\n           <button className=\"Button\" onClick={CSSEditor}>Index.css</button>\n           <button className=\"Button\" onClick={JSEditor}>Index.js</button>\n        </div>\n        <div className=\"CodeEditor\">\n        {htmleditor?<Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />:console.log(\"NOT HTML\")}\n\n        {csseditor?<Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />:console.log(\"NOT HTML\")}\n\n        {jseditor? <Editor\n          language=\"javascript\"\n          displayName=\"JS\"\n          value={js}\n          onChange={setJs}\n        />:console.log(\"NOT JS\")} \n\n        </div>\n\n      </div>\n      <div id=\"LiveView\">\n        <iframe\n         srcDoc={srcDoc}  \n          height=\"100%\"\n          width=\"100%\"\n          title=\"LiveView\"\n          sandbox=\"allow-scripts\"  \n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}